// Generated by CoffeeScript 1.7.1

/*
Created by Rajasekar Elango on 4/3/14.
 */

(function() {
  var Cell, Dimension, Point, drawHouse, findLocation, getCells;

  this.AstroChart = function(element) {
    return element;
  };

  AstroChart.drawChart = function() {
    var houseSize, planets, svg;
    svg = Snap(800, 600);
    houseSize = new Dimension(100, 100);
    svg.rect(0, 0, houseSize.width, houseSize.height).attr({
      fill: "white",
      stroke: "black"
    });

    /*planets = [
      "Su"
      "Mo"
      "Ma"
      "Me"
      "Ju"
      "Ve"
      "Sa"
      "Ra"
      "Ke"
    ]
     */
    planets = ["Mo"];
    drawHouse(svg, new Point(5, 20), houseSize, planets);

    /* x = 5
    y = 20
    xspacing = cellWidth / 3
    yspacing = cellHeight / 3
    i = 0
    
    while i < planets.length
      planet = planets[i]
      point = findLocation(
        new Point(x,y),
        new Dimension(cellWidth, cellHeight),
        i
      )
      s.text point.x, point.y, planet
      ++i
     */
  };

  getCells = function(items) {
    var cells;
    switch (items.length) {
      case 1:
        cells = [new Cell(1, 1, items[0])];
        break;
      case 2:
        cells = [new Cell(0, 0, items[0]), new Cell(2, 2, items[1])];
    }
    return cells;
  };

  drawHouse = function(svg, housePosition, houseSize, items) {
    var cell, point, _i, _len, _ref;
    _ref = getCells(items);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      point = findLocation(housePosition, houseSize, cell);
      svg.text(point.x, point.y, cell.item);
    }
  };

  findLocation = function(housePosition, houseSize, cell) {
    var gridHeight, gridWidth, point;
    gridWidth = houseSize.width / 3;
    gridHeight = houseSize.height / 3;
    point = housePosition.move(cell.row * gridWidth, cell.col * gridHeight);
    console.log(point);
    return point;
  };

  Cell = (function() {
    function Cell(row, col, item) {
      this.row = row;
      this.col = col;
      this.item = item;
    }

    return Cell;

  })();

  Dimension = (function() {
    function Dimension(width, height) {
      this.width = width;
      this.height = height;
    }

    return Dimension;

  })();

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.move = function(x, y) {
      return new Point(this.x + x, this.y + y);
    };

    return Point;

  })();

}).call(this);
